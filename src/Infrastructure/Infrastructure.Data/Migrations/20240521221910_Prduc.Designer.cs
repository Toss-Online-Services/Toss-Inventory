// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;

#nullable disable

namespace eShop.Catalog.API.Infrastructure.Migrations
{
    [DbContext(typeof(CatalogContext))]
    [Migration("20240521221910_Prduc")]
    partial class Prduc
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("CatalogBrand", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableStock")
                        .HasColumnType("integer");

                    b.Property<int>("CatalogBrandId")
                        .HasColumnType("integer");

                    b.Property<int>("CatalogTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Vector>("Embedding")
                        .HasColumnType("vector(384)");

                    b.Property<int>("MaxStockThreshold")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("OnReorder")
                        .HasColumnType("boolean");

                    b.Property<string>("PictureFileName")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("RestockThreshold")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CatalogBrandId");

                    b.HasIndex("CatalogTypeId");

                    b.HasIndex("Name");

                    b.ToTable("Catalog", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("CatalogType", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Catalog.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AdditionalShippingCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AdminComment")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("AllowAddingOnlyExistingAttributeCombinations")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowBackInStockSubscriptions")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowCustomerReviews")
                        .HasColumnType("boolean");

                    b.Property<string>("AllowedQuantities")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("ApprovedRatingSum")
                        .HasColumnType("integer");

                    b.Property<int>("ApprovedTotalReviews")
                        .HasColumnType("integer");

                    b.Property<bool>("AutomaticallyAddRequiredProducts")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("AvailableEndDateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("AvailableForPreOrder")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("AvailableStartDateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("BackorderMode")
                        .HasColumnType("integer");

                    b.Property<int>("BackorderModeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("BasepriceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BasepriceBaseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BasepriceBaseUnitId")
                        .HasColumnType("integer");

                    b.Property<bool>("BasepriceEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("BasepriceUnitId")
                        .HasColumnType("integer");

                    b.Property<bool>("CallForPrice")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("CustomerEntersPrice")
                        .HasColumnType("boolean");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("DeliveryDateId")
                        .HasColumnType("integer");

                    b.Property<bool>("DisableBuyButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("DisableWishlistButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("DisplayAttributeCombinationImagesOnly")
                        .HasColumnType("boolean");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("DisplayStockAvailability")
                        .HasColumnType("boolean");

                    b.Property<bool>("DisplayStockQuantity")
                        .HasColumnType("boolean");

                    b.Property<int>("DownloadActivationType")
                        .HasColumnType("integer");

                    b.Property<int>("DownloadActivationTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("DownloadExpirationDays")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int>("DownloadId")
                        .HasColumnType("integer");

                    b.Property<string>("FullDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("GiftCardType")
                        .HasColumnType("integer");

                    b.Property<int>("GiftCardTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Gtin")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("HasDiscountsApplied")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSampleDownload")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasTierPrices")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasUserAgreement")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDownload")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFreeShipping")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGiftCard")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRental")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShipEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTaxExempt")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("boolean");

                    b.Property<int>("LowStockActivity")
                        .HasColumnType("integer");

                    b.Property<int>("LowStockActivityId")
                        .HasColumnType("integer");

                    b.Property<int>("ManageInventoryMethod")
                        .HasColumnType("integer");

                    b.Property<int>("ManageInventoryMethodId")
                        .HasColumnType("integer");

                    b.Property<string>("ManufacturerPartNumber")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("MarkAsNew")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("MarkAsNewEndDateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("MarkAsNewStartDateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxNumberOfDownloads")
                        .HasColumnType("integer");

                    b.Property<decimal>("MaximumCustomerEnteredPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("MinStockQuantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("MinimumCustomerEnteredPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("NotApprovedRatingSum")
                        .HasColumnType("integer");

                    b.Property<int>("NotApprovedTotalReviews")
                        .HasColumnType("integer");

                    b.Property<bool>("NotReturnable")
                        .HasColumnType("boolean");

                    b.Property<int>("NotifyAdminForQuantityBelow")
                        .HasColumnType("integer");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderMaximumQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("OrderMinimumQuantity")
                        .HasColumnType("integer");

                    b.Property<decimal?>("OverriddenGiftCardAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ParentGroupedProductId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PreOrderAvailabilityStartDateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductAvailabilityRangeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ProductCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductTemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductType")
                        .HasColumnType("integer");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<int>("RecurringCycleLength")
                        .HasColumnType("integer");

                    b.Property<int>("RecurringCyclePeriod")
                        .HasColumnType("integer");

                    b.Property<int>("RecurringCyclePeriodId")
                        .HasColumnType("integer");

                    b.Property<int>("RecurringTotalCycles")
                        .HasColumnType("integer");

                    b.Property<int>("RentalPriceLength")
                        .HasColumnType("integer");

                    b.Property<int>("RentalPricePeriod")
                        .HasColumnType("integer");

                    b.Property<int>("RentalPricePeriodId")
                        .HasColumnType("integer");

                    b.Property<bool>("RequireOtherProducts")
                        .HasColumnType("boolean");

                    b.Property<string>("RequiredProductIds")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("SampleDownloadId")
                        .HasColumnType("integer");

                    b.Property<bool>("ShipSeparately")
                        .HasColumnType("boolean");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool>("ShowOnHomepage")
                        .HasColumnType("boolean");

                    b.Property<string>("Sku")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.Property<bool>("SubjectToAcl")
                        .HasColumnType("boolean");

                    b.Property<int>("TaxCategoryId")
                        .HasColumnType("integer");

                    b.Property<bool>("UnlimitedDownloads")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("UseMultipleWarehouses")
                        .HasColumnType("boolean");

                    b.Property<string>("UserAgreementText")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("VendorId")
                        .HasColumnType("integer");

                    b.Property<bool>("VisibleIndividually")
                        .HasColumnType("boolean");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Catalog.ProductPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<int>("PictureId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPicture");
                });

            modelBuilder.Entity("Domain.Entities.Discounts.DiscountProductMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DiscountId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("DiscountProductMapping");
                });

            modelBuilder.Entity("Infrastructure.IntegrationEventLogEF.IntegrationEventLogEntry", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("TimesSent")
                        .HasColumnType("integer");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid");

                    b.HasKey("EventId");

                    b.ToTable("IntegrationEventLog", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogItem", b =>
                {
                    b.HasOne("Domain.Entities.Catalog.CatalogBrand", "CatalogBrand")
                        .WithMany()
                        .HasForeignKey("CatalogBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Catalog.CatalogType", "CatalogType")
                        .WithMany()
                        .HasForeignKey("CatalogTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogBrand");

                    b.Navigation("CatalogType");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.ProductPicture", b =>
                {
                    b.HasOne("Domain.Entities.Catalog.Product", null)
                        .WithMany("Pictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Discounts.DiscountProductMapping", b =>
                {
                    b.HasOne("Domain.Entities.Catalog.Product", null)
                        .WithMany("Discounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Catalog.Product", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("Pictures");
                });
#pragma warning restore 612, 618
        }
    }
}
